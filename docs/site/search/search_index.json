{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello and Install","text":""},{"location":"#single_molecule_simulations_-_bp_sms_bp","title":"Single Molecule Simulations - BP (SMS_BP)","text":""},{"location":"#author_and_affiliation","title":"Author and affiliation:","text":"<p>Baljyot Singh Parmar   <code>baljyot.parmar@mail.mcgill.ca</code>  Affiliation at the time of writing: McGill University, Canada. Weber Lab</p>"},{"location":"#date_last_modified_2024-09-27","title":"Date last modified: 2024-09-27","text":""},{"location":"#this_is_a_short_doc_for_the_track_simulations_along_with_cluster_simulations","title":"This is a short doc for the Track Simulations along with cluster simulations.","text":"<ul> <li>Author: Baljyot Singh Parmar</li> <li>Affiliation at the time of writing: McGill University, Canada. Weber Lab</li> </ul>"},{"location":"#1_installation","title":"1. Installation","text":""},{"location":"#please_note_all_these_are_for_macoslinux_i_need_to_test_on_windows_i_dont_remember_the_commands_but_will_set_up_a_vm_to_test_this_but_these_commands_should_have_windows_equivalents_if_you_run_into_any_issues_please_create_a_github_issue_on_the_repository_as_it_will_help_me_manage_different_issues_with_different_people_and_also_create_a_resource_for_people_encountering_a_solved_issue","title":"Please note, all these are for macOS/linux. I need to test on windows (I don't remember the commands, but will set up a VM to test this). But these commands should have windows equivalents. If you run into any issues please create a Github issue on the repository as it will help me manage different issues with different people and also create a resource for people encountering a solved issue.","text":""},{"location":"#anaconda","title":"Anaconda","text":"<ol> <li>Make sure you have anaconda installed: https://www.anaconda.com/download</li> <li>Download or clone this repository.</li> <li>In the conda prompt, navigate to the folder where you downloaded this repository using : </li> </ol> <pre><code>cd \"path_to_folder\"\n</code></pre> <ol> <li>Using the SMS_BP.yml file, create a new environment using: </li> </ol> <pre><code>conda env create -f SMS_BP.yml\n</code></pre> <ul> <li>If you get an environment resolve error but you have anaconda installed just skip to step 6. The .yml file is for people who are using miniconda and might not have the packages already installed with the full anaconda install.</li> <li>You may want to still have a conda environment so just create a generic one if you want with the name SMS_BP or whatever you want with python&gt;=3.10. Explicitly, </li> </ul> <pre><code>conda create -n [my_env_name] python=3.10.13\n</code></pre> <ol> <li>Activate the environment using: </li> </ol> <pre><code>conda activate SMS_BP\n</code></pre> <ol> <li>Now we will install this package in edit mode.<ul> <li>Run the command:</li> </ul> </li> </ol> <pre><code>pip install -e . --config-settings editable_mode=compat\n</code></pre>"},{"location":"#pip","title":"Pip","text":"<ol> <li>Make sure you have pip installed: https://pip.pypa.io/en/stable/installing/</li> <li>Make sure you have python 3.10.13 as the active interpreter (through venv or conda or whatever you want).</li> <li>Make sure pip is also installed.</li> <li>Install from pypi using: </li> </ol> <pre><code>pip install SMS-BP\n</code></pre>"},{"location":"#installing_the_cli_tool_using_uv","title":"Installing the CLI tool using UV","text":"<ol> <li>Install UV (https://docs.astral.sh/uv/getting-started/installation/).</li> <li>Run the command:</li> </ol> <pre><code>uv tool install SMS_BP\n</code></pre> <ol> <li>You will have access to two CLI commands (using the uv interface):<ul> <li><code>run_SMS_BP runsim</code> : This is the main entry point for the simulation. (see <code>run_SMS_BP runsim --help</code> for more details)</li> <li><code>run_SMS_BP config</code> : This is a helper tool to generate a template config file for the simulation. (see <code>run_SMS_BP config --help</code> for more details)</li> <li>Note: using <code>run_SMS_BP --help</code> will show you all the available commands.</li> </ul> </li> <li>You can now use these tools (they are isolated in their own env created by uv, which is cool): </li> </ol> <pre><code>run_SMS_BP config [PATH_TO_CONFIG_FILE]\n</code></pre> <pre><code>run_SMS_BP runsim [PATH_TO_SAVED_CONFIG_FILE]\n</code></pre>"},{"location":"#2_running_the_simulation","title":"2. Running the Simulation","text":"<p>Having installed the package, make sure the CLI commands are working:</p> <pre><code>run_SMS_BP --help\n</code></pre> <p>If this does not work submit an issue on the github repository. TODO: convert this into tests.</p> <ol> <li>This is a note on using the CLI tool properly. In the install (step 6) we also installed a CLI tool to interface with the program from anywhere. The only condition is that you are in the SMS_BP conda environment or similar venv you created and installed to (unless you used uv). <ul> <li>Create a template of the config file with default parameters using  <code>bash run_SMS_BP config [PATH_TO_CONFIG_FILE]</code> This will create a sim_config.json file in the current directory. You can add a optional argument (path) to be a [PATH] to save the file elsewhere.</li> <li>To run the CLI tool after the install we can type  <code>bash run_SMS_BP runsim [PATH_TO_SAVED_CONFIG_FILE]</code></li> <li>If you used 1) then this is just: <code>bash run_SMS_BP runsim sim_config.json</code> from anywhere assuming the path you provide is absolute.</li> <li>In the background all this is doing is running:  <code>python from SMS_BP.run_cell_simulation import typer_app_sms_bp; typer_app_sms_bp()</code> This is the entry point.</li> <li>Do note that the config checker is not robust so if you have prodived the wrong types or excluded some parameters which are required alongside other ones you will get an error. Read the src/SMS_BP/sim_config.md for details into the config file parameters. TODO: create CI tests for this.</li> </ul> </li> <li>If you run into any issues please create a Github issue on the repository as it will help me manage different issues with different people and also create a resource for people encountering a solved issue.</li> </ol>"},{"location":"User_Guide_MD/","title":"Starter Guide","text":""},{"location":"User_Guide_MD/#sms_bp_user_guide","title":"SMS_BP User Guide","text":""},{"location":"User_Guide_MD/#1_introduction","title":"1. Introduction","text":"<p>The goal of the SMS_BP package is 3 fold:</p> <ol> <li> <p>Simulate motion of molecules with 3 properties:</p> <ol> <li> <p>Follow FBM (fractional brownian motion)</p> </li> <li> <p>Be bounded (3D by the cell boundary)</p> </li> <li> <p>Molecule motion can change in time based on some user input     probability of change to/from states (allowable states are the     Diffusivity (\\(\\frac{\\mu m ^{2}}{s^{\\alpha}}\\)) and the Hurst     exponent characterizing the correlations in the process'     increments (\\(\\alpha\\)).</p> </li> </ol> </li> <li> <p>Model the motion of condensates (and their size). This dictates a     preferential location inside the cell where the probability of     observing a molecule is higher than the rest of the cell. Multiple     number of condensates can coexist and move independently. The     probability of finding a molecule is then set to a user defined     value of the partition coefficient of the condensates.</p> </li> <li> <p>Combine these two underlying processes and create realistic Single     Molecule Tracking Photoactivatible Localization Microscopy movies     and images which can be used to train tracking methods or analysis     methods for molecule trajectories and cluster detection. These need     to incorporate the photo-physics of the probe used, along with the     optics of the microscopy and camera detection. Namely, it needs to     allow for:</p> <ol> <li> <p>motion blur</p> </li> <li> <p>defocus intensity decay</p> </li> <li> <p>defocus PSF deformation</p> </li> <li> <p>blinking (ON/OFF) of the probe.</p> </li> </ol> </li> </ol> <p>::: info This is not a technical document. I am not discussing how these features are implemented (i think i came up with really nice solutions and would love to talk about it) but to display the large functionality of this code base and how you the user can interact with and use it for your own means. :::</p>"},{"location":"User_Guide_MD/#2_simulation_of_bounded_fbm_n-dimensional","title":"2. Simulation of Bounded FBM (n-dimensional)","text":"<p>The first order of business is to confirm that SMS_BP can simulate BM,FBM given some boundary. Here boundary conditions are implemented as reflecting. For the included plots im showing only 2D motion because it's easier to visualize but don't worry, the real simulation is 3D! In fact using the nice property of stationary increments of FBM you can use this to simulate n-dimensional motion (why you would want to do this I don't know, but you can)!</p> <p> Example of an effectively unconfined random motion where the increments are so small and the duration is not larget enough to encounter the boundary. We can simulate the correct D, \\(\\alpha\\)! Don't worry the boundary is not set in stone and can be user defined. However it must be rectangular.</p> <p> Example of an effectively unconfined subdiffusive motion where the increments are so small and the duration is not large enough to encounter the boundary. We can simulate the correct D, \\(\\alpha\\)!</p> <p> Example of an confined superdiffusive motion where the increments are large enough to encounter the boundary. We can simulate the correct D, \\(\\alpha\\)!</p> <p> Example of an confined superdiffusive motion where the increments are large enough to be totally confined by the boundary. We can simulate the correct D, \\(\\alpha\\) but the extracted fits suffer because of the interactions at the boundary interface!</p> <p> Example of an confined transitioning motion. Here there are 4 states: 2 unique D, and 2 unique Hurst. The ensemble MSD is now a population average of for these and will greatly depend on the D,H values but also on the proportion of each state!</p> <p> The example of Figure 5 showed the transitioning ability of the simulation. Here I show if the user you) gives the rates of transitioning from one state to another (and itself) SMS_BP can accurately simulate the correct transitioning proportions. As a note, this is assuming the process is Markovian and as such is implemented under-the-hood as a MCMC (Markov chain monte carlo).</p> <p>I want to emphasize that I only used 4 unique states here. In fact the user can ask for any combination of these (as many as you want) and the probabilities are all handled under-the-hood. You do not need to worry about typing anything other than the input parameters. I will discuss in future sections how you can define the parameters of the simulations and run it! By this point we have shown that the first goal is accomplished. Lets move on to the condensate!</p>"},{"location":"User_Guide_MD/#3_condensate_definitions_and_movement","title":"3. Condensate Definitions and Movement","text":"<p>So far we have worked with individual trajectories and let them start at the origin. What if we want to simulate many trajectories (molecule motion) but starting at different places in the cells? One choice is to randomly sample the cellular space and start the observation of a molecule. But if the underlying space is heterogeneous in the density of molecules we are tracing we can define the cellular space as a probability space. Each spatial element defines the expected probability of finding a molecule in that region. This framework leads to the definition of a condensate!</p> <p>A condensate in the framework of SMS_BP is defined as a circular/spherical region in the cell which has a higher probability per unit volume to find a molecule. That it, so simple! The nice consequence of using this simple definition is that we can also model the motion of the condensate by using the probability space. By letting the probability space be time dependent Figure 7 shows that we can treat the condensate as a moving trajectory itself and using the framework we developed previously to model its motion as BM or FBM! Isn't that cool?</p> <p> Here we can simulate any number of condensates (here I show 2). Implementation wise, their motion is independent of one another. But using the framework of the FBM from before we can model the condensates motion in anyway we like. Here one condensate is subdiffusive with a small diffusion coefficient and one which is super-diffusive with a larger diffusion coefficient. The blue lines represent the motion of the centre of each condensate. The red circles show the extent of the condensate boundary. In this case the size (radius) of the condensate does not change in time. But rest assured, SMS_BP allows you to change this as you like! Since these objects are built on the same framework as the FBM, they share all the features of the molecule motion we outlined before.</p> <p>Again you should think of the condensate as a probability space which is time and space dependent, \\(p(s,t)\\). This condensate movement occurs in the background of the true molecule simulation and informs the location of the individual molecule positions as they turn on to their fluorescent state. This is parameterized by a probability density defined by the user which we will talk about later. For now bask in the glory that is SMS_BP.</p>"},{"location":"User_Guide_MD/#4_conversion_of_backend_trajectories_to_observable_palm-like_images","title":"4. Conversion of Backend Trajectories to Observable PALM-like Images","text":"<p>Okay all of the previous features are considered the backend of the simulation. They define what process are occurring. Our job now is to express these processes in a way which is similar to what an experimenter would observe from a typical SMT experiment. There are 3 things to consider: getting the photo-physics (intensities, PSF, etc ..) correct, modelling the effect of motion blurring, and the affect of the focal depth.</p> <p>The first is not that hard, assuming we have knowledge of the properties of the PSF and the intensities (photon counts) of individual molecule localizations (at a given exposure) we can define the mean photons emitted and captured at the detector in a time frame. The issue is the motion blurring. Since this is affected by fast motion and corresponding long exposures we actually sample the motion of the trajectories at a smaller time resolution than the exposure time! For example, if the exposure time is 100 ms the camera is on for 100 ms capturing photons emitted. Meanwhile the underlying molecule is still moving so rather than simulating the motion at 100 ms intervals we can simulate it at a smaller interval (\\(t &lt; 100ms\\)) and integrate the photons over the exposure time, 100ms. For fast moving molecules which would resemble comet tails as the intensity (the photons) would leave a trail of photons in its wake over the time the detector is on.</p> <p>SMS_BP allows the user to define the smaller sample time, \\(t\\). For example, in Figure 8 I show the effect of a sample time smaller than the exposure time. For visual aid I have cranked up the mean photons emitted/captured to make the comet tail readily apparent. You can change all these parameters, and we will do this in the final section.</p> <p> Here the motion of a molecule is sampled every 1 ms. The exposure time is 20 ms and there is no interval time between measurements. All three of these parameters ca be user defined! Notice at this particualar frame the PSF of the molecule appears distorted? This is because of motion blur and defocus modelled by SMS_BP. For visual aid I have artificially increased the mean photons emitted/captured for this molecule. The image is slightly ugly due to png compression, but you will get to make your own simulations and appreciate the details.</p> <p> Here the motion of a molecule is sampled every 20 ms. The exposure time is 20 ms and there is no interval time between measurements. Notice there is no PSF deformation in this frame, since the molecule is modelled every 20 ms from the point of view of the simulation nothing occurs in the interval. This is because of there is no modelled motion blur and defocus by SMS_BP. Compared to Figure 8 the only difference is that the over sampling (the \\(t\\) I discuss in the text) is the same as the exposure time in this particular case. For visual aid I have artificially increased the mean photons emitted/captured for this molecule.</p>"},{"location":"User_Guide_MD/#5_working_with_the_code","title":"5. Working With the Code","text":"<p>First things first: use the installing instructions in the main README.md to get the conda environment created and the package installed on your system. This allows you to use the functionality of SMS_BP from anywhere since the path is appended to the main python search path.</p> <p>There are 2 different ways to interact with the code.</p> <ol> <li> <p>In the install we also install a CLI command run_SMS_BP which will     work globally (you do not need to be in the directory of the     project). You will need to provide a config file location to this     command or it will be unhappy with you. You can run run_SMS_BP --help     to see uses.</p> </li> <li> <p>The second is to use the actual code itself through import. We can     do this since we have installed the code as a package.</p> </li> </ol> <p>To keep it simple for now let's focus on the first method. We can run the CLI command: </p> <pre><code>run_SMS_BP config [PATH_TO_CONFIG_FILE]\n</code></pre> <p>This will create a template config file in the current directory if [PATH_TO_CONFIG_FILE] is set to \".\". You can change the . to be a [PATH] to save the file elsewhere. In this newly created template file you will see a nested dictionary with a bunch of parameters and associated values. We will go over each of these and what values are allowable. The document sim_config.md is a text file describing each parameter and the units of each parameter in our main sim_config.json. Use it as a reference if you want to change any of the parameters later on.</p> <p>First of all. Let's change one parameter in the sim_config.json. Find the set of parameters called \\\"Output_Parameters\\\". Inside you will find a parameter called \\\"output_path\\\". Currently it contains a placeholder. Change this to a string which is the absolute path of the place you want SMS_BP to store the final results. So to reiterate change the string \\\"\\&lt;YOUR-PATH-HERE-CAN-BE-ABSOLUTE-OR-RELATIVE&gt;\\\" to the path you want.</p> <p>We can keep the rest of the parameters the same for now and let's just run the simulation. Run using </p> <pre><code>run_SMS_BP runsim sim_config.json\n</code></pre> <p>Once the simulation finishes you will find a new folder created at the path you specified and inside a few files and folders. For now ignore the folders. The .tiff file is the movie of the simulation. params_dump.json is a copy of the sim_config.json used to create this particular simulation, it is also provided as a pickle file. The final file Track_dump.pkl is the true simulation of the underlying motion we did in section 1. This allows you to track the PSFs in the movie and compare back to the true positions of the molecules to see how well you did!</p> <p>Let's redo this but now with the variable oversample_motion_time equal to the exposure_time. Set both to 20 (ms). Notice any difference in the two output movies? This is all I did to create figures 8-9.</p> <p>To do further changes in the simulation I recommend reading the sim_config.md file explaining the role of each parameter in the sim_config.json file. If required I might make tutorials for other features I did not discuss here.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>Copyright (c) [2024] Baljyot Singh Parmar [All rights reserved].</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. THIS SOFTWARE IS PROVIDED BY Baljyot Singh Parmar \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL [Baljyot Singh Parmar] BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"sim_config/","title":"sim_config Documentation","text":""},{"location":"sim_config/#documentation_for_the_simulation_configuration_file_of_the_same_name","title":"Documentation for the simulation configuration file of the same name","text":"<ul> <li>Simulation Configuration File</li> <li>Latest version supported: v.0.1</li> </ul>"},{"location":"sim_config/#simulation_configuration_file","title":"Simulation Configuration File","text":"<ul> <li>version: string<ul> <li>version of the simulation configuration file</li> </ul> </li> <li>length_unit: string<ul> <li>length unit of the simulation (e.g. nm, um, mm)</li> </ul> </li> <li>space_unit: string<ul> <li>space unit of the simulation (this is just pixel, should not change)</li> </ul> </li> <li>time_unit: string<ul> <li>time unit of the simulation (e.g. s, ms, us)</li> </ul> </li> <li>intensity_unit: string<ul> <li>intensity unit of the simulation (AUD only supported)</li> </ul> </li> <li> <p>diffusion_unit: string</p> <ul> <li>diffusion unit of the simulation (e.g. um^2/s, mm^2/s)</li> </ul> </li> <li> <p>Cell_Parameters: dict  </p> <ul> <li>cell_space: 2D array (units of space_unit)<ol> <li>cell_space[0]: x coordinates of the cell space (min, max)</li> <li>cell_space[1]: y coordinates of the cell space (min, max)</li> </ol> </li> <li>cell_axial_radius: float (units of space_unit)<ol> <li>The distance from z=0 in either direction that the cell extends </li> </ol> </li> <li>number_of_cells: int<ol> <li>number of cells to simulate (if more than 1 hen all are simulated in one folder defined by the output_path)</li> </ol> </li> </ul> </li> <li> <p>Track_Parameters: dict  </p> <ul> <li>num_tracks: int<ol> <li>number of tracks to simulate</li> </ol> </li> <li>track_type: string<ol> <li>type of track to simulate (\"fbm\")</li> </ol> </li> <li>track_length_mean: int (frames) <ol> <li>mean length of the track</li> </ol> </li> <li>track_distribution: string<ol> <li>distribution of the track lengths (\"exponential\",\"constant\")</li> </ol> </li> <li>diffusion_coefficient: list of floats (units of diffusion_unit)<ol> <li>diffusion coefficient of the track, the length of the list is the unique type of diffusion coefficients</li> </ol> </li> <li>diffusion_track_amount: list of floats<ol> <li>Only viable if allow_transition_probability is False</li> <li>length is the total number of diffusion coefficients</li> <li>each element is the probability of the track having the diffusion coefficient at the same index in the diffusion_coefficient list (add up to 1.0)</li> </ol> </li> <li>hurst_expontent: list of floats<ol> <li>hurst exponent of the track, the length of the list is the unique type of hurst exponents</li> </ol> </li> <li>hurst_track_amount: list of floats<ol> <li>Only viable if allow_transition_probability is False</li> <li>length is the total number of hurst exponents</li> <li>each element is the probability of the track having the hurst exponent at the same index in the hurst_exponent list (add up to 1.0)</li> </ol> </li> <li>allow_transition_probability: bool<ol> <li>whether to allow transition probabilities between different diffusion coefficients and hurst exponents within a track</li> <li>if false, the track will have a single diffusion coefficient and hurst exponent</li> </ol> </li> <li>transition_matrix_time_step: int<ol> <li>time step at which the diffusion and hurst exponent transition matrices are supplied in the following parameters</li> <li>the units are in time_unit (so 100 ms would be 100)</li> </ol> </li> <li>diffusion_transition_matrix: 2D array (discrete state probabilitiy at the transition_matrix_time_step = dt)<ol> <li>transition matrix between different diffusion coefficients</li> <li>rows are the current diffusion coefficient</li> <li>columns are the next diffusion coefficient</li> <li>rows must sum to 1.0</li> </ol> </li> <li>hurst_transition_matrix: 2D array (discrete state probabilitiy at the transition_matrix_time_step = dt)<ol> <li>transition matrix between different hurst exponents</li> <li>rows are the current hurst exponent</li> <li>columns are the next hurst exponent</li> <li>rows must sum to 1.0</li> </ol> </li> <li>state_probability_diffusion: 1D array (probability)<ol> <li>probability of a track being in a certain diffusion coefficient state</li> <li>length is the number of unique diffusion coefficients</li> </ol> </li> <li>state_probability_hurst: 1D array (probability)<ol> <li>probability of a track being in a certain hurst exponent state</li> <li>length is the number of unique hurst exponents</li> </ol> </li> </ul> </li> <li> <p>Global_Parameters: dict  </p> <ul> <li>field_of_view_dim: 1D array (units of space_unit)<ol> <li>field of view dimensions (x,y (pixels))</li> </ol> </li> <li>frame_count: int<ol> <li>number of frames to simulate</li> </ol> </li> <li>exposure_time: float or int (units of time_unit)<ol> <li>exposure time of the camera</li> </ol> </li> <li>interval_time: float or int (units of time_unit)<ol> <li>time between frames that the camera is on</li> </ol> </li> <li>oversample_motion_time: float or int (units of time_unit)<ol> <li>oversampling the motion for motion blur</li> <li>if oversample_motion_time == frame_time == exposure_time, then there is no motion blur</li> <li>cannot be greater than frame_time or exposure_time</li> </ol> </li> <li>pixel_size: float (units of length_unit)<ol> <li>size of the pixel</li> </ol> </li> <li>axial_detection_range: float (units of length_unit)<ol> <li>from z=0, the distance in either direction that the camera can detect a single molecule excitation</li> </ol> </li> <li>base_noise: float (units of intensity_unit)<ol> <li>base noise of the camera (offset)</li> </ol> </li> <li>point_intensity: float (units of intensity_unit)<ol> <li>intensity of a single molecule excitation</li> </ol> </li> <li>psf_sigma: float (units of length_unit)<ol> <li>size of the psf (assumed to be gaussian)</li> </ol> </li> <li>axial_function: string (\"exponential\",\"ones\"(no effect))<ol> <li>function used to determine how the intensity of the single molecule changes with z</li> </ol> </li> </ul> </li> <li> <p>Condenstate_Parameters: dict  </p> <ul> <li>initial_centers: 2D array (units of space_unit)<ol> <li>initial centers of the condensates</li> <li>[x,y,z] coordinates per row</li> <li>number of rows is the number of condensates</li> </ol> </li> <li>initial_scale: 1D (units of space_unit)<ol> <li>initial radius of the condensates</li> <li>number of elements is the number of condensates</li> <li>must be the same length as initial_centers</li> </ol> </li> <li>diffusion_coefficient: 1D array (units of diffusion_unit)<ol> <li>diffusion coefficient of the condensates</li> <li>number of elements is the number of condensates</li> <li>must be the same length as initial_centers</li> </ol> </li> <li>hurst_exponent: 1D array<ol> <li>hurst exponent of the condensates</li> <li>number of elements is the number of condensates</li> <li>must be the same length as initial_centers</li> </ol> </li> <li>density_dif: float<ol> <li>density difference between the condensates and the rest of the cell</li> </ol> </li> </ul> </li> <li> <p>Output_Parameters: dict  </p> <ul> <li>output_path: string<ol> <li>path to save the output, directory</li> </ol> </li> <li>output_name: string<ol> <li>name of the output file *subsegment_type: string</li> <li>function used to do projections (\"mean\",\"max\",\"sum\")</li> </ol> </li> <li>subsegment_number: int<ol> <li>number of subsegments to divide the cell frames into</li> <li>if total movie is 500 frames and this is 5 then there will be 100 frames per subsegment and 5 subsegments in total</li> <li>Make sure that the total number of frames is divisible by the number of subsegments (modulus is 0)</li> </ol> </li> </ul> </li> </ul>"}]}